@using Plugin.Maui.OCR
@using System.Text.Json
@using Microsoft.Maui.Storage
@using System.IO
@using MauiApp2.Models
@using MauiApp2.Service
@inject ToastService ToastService
@using SkiaSharp;
@inject NavigationManager Navigation
@inject ImageService ImageService

@if (IsVisible)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <textarea class="form-control" rows="4" placeholder="Extracted Text" @bind="Image.ImgDataExtractedText" />
                    @if (!string.IsNullOrEmpty(Image.ImgData_Img_Url))
                    {
                        <div class="mt-4 position-relative" style="max-width: 100%; width: 350px;">
                            <img src="@Image.ImgData_Img_Url" class="img-fluid rounded shadow" />
                            <div class="position-absolute bottom-0 start-0 text-white w-100 p-2" style="background: rgba(0,0,0,0.5); font-size: 0.9rem;">
                                <div>📝 <strong>@Image.ImgDataExtractedText</strong></div>
                                @*  <div>⏰ @Imagdto.ImgDataTimedate?.ToString("dd-MMM-yyyy HH:mm:ss")</div> *@
                                @if (!string.IsNullOrEmpty(Image.ImgDataLocation))
                                {
                                    <div>🏠 <span>@Image.ImgDataLocation</span></div>
                                }
                            </div>
                        </div>
                    }
                    <div class="mt-3 d-flex gap-2">
                      @*   <button class="btn btn-primary" @onclick="CaptureAndExtractText" disabled="@isCameraLoading">
                            @if (isCameraLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <text>Capturing...</text>
                            }
                            else
                            {
                                <text>📸 Camera</text>
                            }
                        </button> *@

                        <button class="btn btn-success" @onclick="Upload" disabled="@isUploadLoading">
                            @if (isUploadLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <text>Uploading...</text>
                            }
                            else
                            {
                                <text>⬆️ Upload</text>
                            }
                        </button>

                        <button class="btn btn-secondary" @onclick="CloseModal"> ❌ Cancel</button>
                    </div>

                  
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public ImageModel Image { get; set; } = new ImageModel();

    [Parameter] public string Title { get; set; } = "Add Image";
    [Parameter] public string ButtonText { get; set; } = "Add";
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    private bool isLoading = true;
    private string? errorMessage;

    // Pagination
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 10;
    private FileResult? capturedFile;
    private bool isCameraLoading = false;
    private bool isUploadLoading = false;
    public static class ImageCompressor
    {
        public static byte[] CompressImage(byte[] inputBytes, int maxSizeKb = 10, int initialQuality = 50)
        {
            using var inputStream = new SKMemoryStream(inputBytes);
            using var codec = SKCodec.Create(inputStream);
            var bitmap = SKBitmap.Decode(codec);

            if (bitmap == null)
                throw new Exception("Failed to decode image.");

            using var image = SKImage.FromBitmap(bitmap);

            int quality = initialQuality;
            byte[] compressedBytes;

            do
            {
                using var data = image.Encode(SKEncodedImageFormat.Jpeg, quality);
                compressedBytes = data.ToArray();
                quality -= 5;

            } while (compressedBytes.Length > maxSizeKb * 1024 && quality > 5);

            return compressedBytes;
        }

    }


    private async Task<string> GetAddressFromCoordinates(double lat, double lng)
    {
        try
        {
            using var httpClient = new HttpClient();
            var url = $"https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat={lat}&lon={lng}";
            httpClient.DefaultRequestHeaders.UserAgent.TryParseAdd("request");

            var response = await httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var result = JsonDocument.Parse(json);
                if (result.RootElement.TryGetProperty("display_name", out var displayName))
                {
                    return displayName.GetString();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Reverse geocode failed: {ex.Message}");
        }
        return "Address not found";
    }

    private async Task CaptureAndExtractText()
    {

        try
        {
            isCameraLoading = true;
            var cameraStatus = await Permissions.CheckStatusAsync<Permissions.Camera>();
            if (cameraStatus != PermissionStatus.Granted)
                cameraStatus = await Permissions.RequestAsync<Permissions.Camera>();

            if (cameraStatus != PermissionStatus.Granted)
            {
                ToastService.Show("Camera permission denied.", "danger");
                return;
            }

            var photo = await MediaPicker.CapturePhotoAsync();
            if (photo != null)
            {
                capturedFile = photo;
                using var stream = await photo.OpenReadAsync();
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var imageBytes = ms.ToArray();
                // 🔽 Compress to under 50KB
                var compressedBytes = ImageCompressor.CompressImage(imageBytes, 50);
                Image.ImgData_Img_Url = $"data:image/jpeg;base64,{Convert.ToBase64String(compressedBytes)}";

                var ocrResult = await OcrPlugin.Default.RecognizeTextAsync(imageBytes);

                if (ocrResult.Success && !string.IsNullOrWhiteSpace(ocrResult.AllText))
                {
                    Image.ImgDataExtractedText = ocrResult.AllText;
                }
                else
                {
                    Image.ImgDataExtractedText = string.Empty; // keep textarea empty
                    ToastService.Show("Text Not Found. Please try again.", "danger");
                }


                var locationStatus = await Permissions.CheckStatusAsync<Permissions.LocationWhenInUse>();
                if (locationStatus != PermissionStatus.Granted){
                    locationStatus = await Permissions.RequestAsync<Permissions.LocationWhenInUse>();
                    ToastService.Show("Location permission denied. GPS data will not be captured.", "danger");
                }
                else
                {
                    var location = await Geolocation.GetLastKnownLocationAsync() ?? await Geolocation.GetLocationAsync(new GeolocationRequest
                    {
                        DesiredAccuracy = GeolocationAccuracy.High,
                        Timeout = TimeSpan.FromSeconds(10)
                    });

                    if (location != null)
                    {
                        Image.Latitude = location.Latitude;
                        Image.Longitude = location.Longitude;
                        Image.ImgDataLocation = await GetAddressFromCoordinates(location.Latitude, location.Longitude);
                    }
                }

                Image.ImgDataTimedate = DateTime.Now;
            }
        }
        catch (Exception ex)
        {
            Image.ImgDataExtractedText = $"Error: {ex.Message}";
        }
        finally
        {
            isCameraLoading = false;
        }
    }

    private async Task Upload()
    {
        try
        {
            if (string.IsNullOrEmpty(Image.ImgData_Img_Url) || string.IsNullOrEmpty(Image.ImgDataExtractedText) || string.IsNullOrEmpty(Image.ImgDataLocation))
            { 
                ToastService.Show(" Please Check  Photo , Extract Text and the Loaction before uploading.", "warning");
                return;
            }
            isUploadLoading = true;

            await ImageService.AddImageAsync(capturedFile, Image.ImgDataExtractedText, Image.ImgDataLocation, Image.ImgDataUserUploaded, Image.ImgDataCreateUid, Image.ImgDataEditedUid); // ✅ Use bound parameter directly
            ToastService.Show("Image uploaded successfully!", "success");
            // await OnSubmit.InvokeAsync(); // Notify parent to refresh list
            await CloseModal();
            //Navigation.NavigateTo("/Image");
        }
        catch (Exception ex)
        {
            ToastService.Show($"Upload failed: {ex.Message}", "danger");
        }
        finally
        {
            isUploadLoading = false;
        }
    }

    // private async Task LoadDetailsImage()
    // {
    //     isLoading = true;
    //     errorMessage = null;

    //     try
    //     {
    //         var response = await ImageService.GetImaggeAsync();
    //         // imgmodel = response.data;
    //         // totalPages = (int)Math.Ceiling((double)imgmodel.Count / pageSize);
    //     }
    //     catch (Exception ex)
    //     {
    //         errorMessage = $"Error loading images: {ex.Message}";
    //     }
    //     finally
    //     {
    //         isLoading = false;
    //     }
    // }

    private async Task CloseModal() => await OnClose.InvokeAsync();
    protected override async Task OnInitializedAsync()
    {
        var cameraStatus = await Permissions.CheckStatusAsync<Permissions.Camera>();
        if (cameraStatus != PermissionStatus.Granted)
            cameraStatus = await Permissions.RequestAsync<Permissions.Camera>();
        var locationStatus = await Permissions.CheckStatusAsync<Permissions.LocationWhenInUse>();
        if (locationStatus != PermissionStatus.Granted)
        {
            locationStatus = await Permissions.RequestAsync<Permissions.LocationWhenInUse>();

        }
        await CaptureAndExtractText();
    }
}
